[Необходимые программы]
 - X-Ray MOD SDK
 - совмещённый с MOD SDK S.T.A.L.K.E.R. версии 1.0004 или старше


[Назначение файлов и каталогов]
aiwrapper.exe		- оболочка-сборщик
fsaiwrapper.ltx		- файл спецификации путей для aiwrapper
aiwrapper.ini		- файл настроек для aiwrapper
2215\			- теневое дерево, которое использует xrAI от
			  сборки 2215 (все обновления в нём делает
			  утилита aiwrapper автоматически)

deprecated\links.sample	- пример изменения рёбер ИИ-графа


[Установка]
Скопировать aiwrapper.exe и fsaiwrapper.ltx в какой-нибудь каталог,
поправить соответствующим образом $sdk_root$ (корневая папка SDK),
$2215_fs_root$ (путь к теневому дереву сборки 2215) и $cs_fs_root$
(путь к дереву ЧН). Последнее нужно лишь для aiwrapper -upgrade.

Положить aiwrapper.ini либо в папку с aiwrapper.exe, либо в $sdk_root$.

Задать $sdk_root$ в $2215_fs_root$\fsgame.ltx.

После этого один раз выполнить:
	> aiwrapper -split_spawns

и в случае модифицированной игры:
	> aiwrapper -split_paths

Эти команды разобьют all.spawn на оригинальные level.spawn/level.game.

Перечисленные ниже файлы используются во время работы aiwrapper и xrAI:
gamedata\config\*
gamedata\game.graph
gamedata\spawns\all.spawn
gamedata\levels\*\level.ai
gamedata\levels\*\level.game
gamedata\levels\*\level.gct
gamedata\levels\*\level.graph
gamedata\levels\*\level.spawn


[Параметры командной строки aiwrapper]
Унаследованные от xrAI параметры:
 -h or -?	- вывести короткую справку (на английском)
 -verify <имя_карты>	- проверить связность сетки ИИ для карты в
			  gamedata\levels\<имя_карты>\
 -f <имя_карты>	- собрать сетку ИИ для карты в
		  gamedata\levels\<имя_карты>\
 -draft		- черновая сборка сетки ИИ (без просчёта укрытий)
 -g <имя_карты>	- построить ИИ-граф и таблицу соответствия с
		  сеткой ИИ
		- для карты в gamedata\levels\<имя_карты>\
 -m		- склеить ИИ-графы карт в глобальный игровой граф
 -s		- сборка all.spawn

Собственные параметры:
 -fs <файл>	- использовать указанный файл для задания путей
		  (по умолчанию берётся fsaiwrapper.ltx)
 -fast_sync	- обновлять только старые файлы в теневом дереве
 -split_spawns	- разбить all.spawn на исходные level.spawn
 -split_paths	- разбить all.spawn на исходные level.game
 -check_paths	- проверить all.spawn на наличие walk-путей с висящими
		  вершинами
 -upgrade <версия>	- преобразовать уже готовые game.graph,
		  spawns\all.spawn и
		  levels\*\level.{ai|gct|env_mod|ps_static} в формат
		  ЧН. параметр <версия> должен быть равен либо 3120 для
		  утёкшей с GC'07 сборки, либо 3502 и больше для
		  финальных версий ЧН.

Устаревшие параметры:
 -m2 <файл>	- склеить ИИ-графы карт в глобальный игровой граф с
		  учётом поправок для связей из указанного файла
 -dump_gp	- вывести список исходных вершин ИИ-графа в
		  файл с именем links.output


[Введение в ИИ-граф]
Новый уровень должен содержать хотя бы один graph_point и иметь
переход(ы) на другие карты. Существует два типа переходов. Первые
используются только игроком, могут добавляться в LE, с помощью acdc.pl
или даже на лету и далее здесь не обсуждаются. Вторые нужны для
перемещения ИИ-объектов. ИИ-переходы для карт с доступными исходниками
задаются в LE. Если исходников нет, используйте converter.exe. 

Обычно одной вершины ИИ-графа (graph_point) совершенно недостаточно.
Оценить необходимую плотность можно такой функцией на LUA:

function show_game_graph()
	local gg = game_graph()
	for gvid=0,2791 do
		if gg:valid_vertex_id(gvid) then
			local vertex = gg:vertex(gvid)
			local level_name = alife():level_name(vertex:level_id())
			local lvid = vertex:level_vertex_id()
			local pos = vertex:level_point()
			local obj = alife():create("medkit", pos, lvid, gvid)
			level.map_add_object_spot_ser(obj.id, "alife_presentation_monstr", level_name..":"..gvid)
		end
	end
end


[Сборка ИИ-компонентов карты]
1) Добавление уровня в список в gamedata\config\game_levels.ltx
2) LevelEditor -> Compile -> Make Game, там же Make AI-Map и Build.
3) Сборка черновой сетки ИИ:
	> aiwrapper -draft -f <имя_уровня>
   На выходе: gamedata\levels\<имя_уровня>\level.ai.
4) Проверка связности сетки ИИ:
	> aiwrapper -verify <имя_уровня>
   В случае ошибки поправить ячейки в LE и повторить с п.2.
5) Просчёт укрытий для сетки ИИ. Предварительно необходимо произвести
   сборку геометрии для получения build.cform (xrLC, здесь это не
   рассматривается). Команда:
	> aiwrapper -f <имя_уровня>
   Вообще, этот шаг необязателен на ранних этапах тестирования карты.
6) Сборка ИИ-графа:
	> aiwrapper -g <имя_уровня>
   На выходе: gamedata\levels\<имя_уровня>\level.{graph|gct.raw}
7) Склейка ИИ-графов карт в глобальный игровой граф:
	> aiwrapper -m
   На выходе: gamedata\game.graph и gamedata\levels\*\level.gct
   (см. ниже для случая с картами без исходников)
8) Сборка all.spawn
	> aiwrapper -s
   На выходе: gamedata\spawns\all.spawn
9) Добавление level_changer'а на новую карту с помощью acdc.pl.
   Здесь не рассматривается.
10) Регистрация уровня в gamedata\config\game_maps_single.ltx.
   Здесь не рассматривается.


[Замечания]
 - Похоже, xrAI от 2215 немного иначе считает длины рёбер ИИ-графов,
   в том числе межуровневые в глобальном графе. Это может повлиять на
   скорость и даже пути перемещения ИИ-персонажей между картами.
 - В результате полной сборки обновляются level.gct всех карт, то есть
   эти файлы необходимо распространять в составе модификации.


[Задание связей для карт без исходников -- устаревшая информация]
Для создания обратных связей с карт без исходников нужно собирать
game.graph командой:
	> aiwrapper -m2 <файл_с_описанием_доп_связей>

Список целевых вершин для ИИ-переходов можно получить с помощью:
	> aiwrapper -dump_graph <имя_файла>

Пример файла имеется в архиве (deprecated\links.sample).

Посмотреть получившиеся после склейки ИИ-графов связи можно так:
	> ggtool.pl game.graph
